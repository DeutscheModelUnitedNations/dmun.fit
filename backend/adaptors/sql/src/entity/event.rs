//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.3

use chrono::{DateTime as ChronoDateTime, Utc};
use data::event::Event;
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "event")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    pub name: String,
    pub created_at: DateTime,
    pub times: Json,
    pub timezone: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::person::Entity")]
    Person,
}

impl Related<super::person::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Person.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

impl From<Model> for Event {
    fn from(value: Model) -> Self {
        Self {
            id: value.id,
            name: value.name,
            created_at: ChronoDateTime::<Utc>::from_utc(value.created_at, Utc),
            times: serde_json::from_value(value.times).unwrap_or(vec![]),
            timezone: value.timezone,
        }
    }
}
